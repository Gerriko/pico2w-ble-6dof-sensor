// lsm303dlm.h
// Note that this code was generated by Google Code Assist

#ifndef LSM303DLM_H
#define LSM303DLM_H

#include <stdint.h>
#include "hardware/i2c.h"

// LSM303DLM I2C addresses
#define LSM303DLM_ACCEL_ADDR 0x18 // SA0 low
#define LSM303DLM_MAG_ADDR   0x1E // SA0 low

// LSM303DLM Accelerometer Registers
#define LSM303DLM_ACCEL_CTRL_REG1_A 0x20
#define LSM303DLM_ACCEL_CTRL_REG4_A 0x23
#define LSM303DLM_ACCEL_OUT_X_L_A  0x28
#define LSM303DLM_ACCEL_OUT_X_H_A  0x29
#define LSM303DLM_ACCEL_OUT_Y_L_A  0x2A
#define LSM303DLM_ACCEL_OUT_Y_H_A  0x2B
#define LSM303DLM_ACCEL_OUT_Z_L_A  0x2C
#define LSM303DLM_ACCEL_OUT_Z_H_A  0x2D

// LSM303DLM Magnetometer Registers
#define LSM303DLM_MAG_CRA_REG_M    0x00
#define LSM303DLM_MAG_CRB_REG_M    0x01
#define LSM303DLM_MAG_MR_REG_M     0x02
#define LSM303DLM_MAG_OUT_X_H_M    0x03
#define LSM303DLM_MAG_OUT_X_L_M    0x04
#define LSM303DLM_MAG_OUT_Z_H_M    0x05
#define LSM303DLM_MAG_OUT_Z_L_M    0x06
#define LSM303DLM_MAG_OUT_Y_H_M    0x07
#define LSM303DLM_MAG_OUT_Y_L_M    0x08

// Configuration values for LSM303DLM
// -- Accelerometer CTRL_REG1_A (0x20)
#define ACCEL_XYZ_ENABLE_10HZ       0x27 // ODR=10Hz, Normal Mode, X,Y,Z enabled
// -- Accelerometer CTRL_REG4_A (0x23)
#define ACCEL_FS_2G_CONT_UPDATE     0x00 // Continuous update, LSB at lower addr, +/- 2g, High Res disabled

// -- Magnetometer MR_REG_M (0x02)
#define MAG_CONTINUOUS_MODE         0x00 // Continuous-conversion mode

// -- Magnetometer CRB_REG_M (0x01)
#define MAG_GAIN_1_3_GAUSS          0x20 // +/- 1.3 Gauss full scale

// -- Magnetometer CRA_REG_M (0x00)
#define MAG_DATA_RATE_15HZ          0x14 // Temp sensor disabled, 15 Hz data output rate

// Accelerometer Data Structure
typedef struct {
    int16_t x;
    int16_t y;
    int16_t z;
} accel_data_t;

// Magnetometer Data Structure
typedef struct {
    int16_t x;
    int16_t y;
    int16_t z;
} mag_data_t;

// Function Prototypes
void lsm303dlm_init(i2c_inst_t *i2c, uint sda_pin, uint scl_pin);
bool lsm303dlm_config(i2c_inst_t *i2c);
bool lsm303dlm_read_accel(i2c_inst_t *i2c, accel_data_t *accel_data);
bool lsm303dlm_read_mag(i2c_inst_t *i2c, mag_data_t *mag_data);
uint8_t lsm303dlm_get_accel_fs(i2c_inst_t *i2c); // Returns FS value in g (2, 4, 8) or 0 on error
float lsm303dlm_get_mag_fs(i2c_inst_t *i2c);     // Returns FS value in Gauss (1.3, 1.9, ..., 8.1) or 0.0 on error

#endif // LSM303DLM_H
