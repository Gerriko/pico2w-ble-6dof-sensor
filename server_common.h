/**
 * Copyright (c) 2023 Raspberry Pi (Trading) Ltd. for temp_sensor example code
 * This project was based on the temp_sensor example downloaded via the VSCode Raspberry Pi Pico Project Extension
 * The revised code in server_common includes modifications generated by Google Code Assist
 * with further modifications/tweaks done by C Gerrish (Gerrikoio) (c) May 2025
 * Google Code Assist also added in its own comments
 * 
 * This file contains the BLE functions required to handle read, writes and updates
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

#ifndef SERVER_COMMON_H_
#define SERVER_COMMON_H_

#define ADC_CHANNEL_TEMPSENSOR 4

// Structure to hold notification enabled status for all characteristics
typedef struct {
    bool temperature;
    bool sample_rate;
    bool pitch;
    bool roll;
    bool heading_raw;
    bool heading_comp;
} notification_status_t;

// Structure to hold data readiness status for characteristics
typedef struct {
    bool temperature;
    // sample_rate does not have notification property
    bool pitch;
    bool roll;
    bool heading_raw;
    bool heading_comp;
} data_ready_status_t;

extern notification_status_t g_notification_status;
extern data_ready_status_t g_data_ready_status;

extern hci_con_handle_t con_handle;
extern uint16_t current_temp;
extern uint8_t const profile_data[];

extern uint16_t sample_rate;
extern uint32_t pitch_deg;
extern uint32_t roll_deg;
extern uint32_t heading_deg_raw;
extern uint32_t heading_deg_comp;


void packet_handler(uint8_t packet_type, uint16_t channel, uint8_t *packet, uint16_t size);
uint16_t att_read_callback(hci_con_handle_t connection_handle, uint16_t att_handle, uint16_t offset, uint8_t * buffer, uint16_t buffer_size);
int att_write_callback(hci_con_handle_t connection_handle, uint16_t att_handle, uint16_t transaction_mode, uint16_t offset, uint8_t *buffer, uint16_t buffer_size);
void poll_temp(void);

#endif
